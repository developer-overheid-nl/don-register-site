---
export const prerender = false; // Not needed in 'server' mode
import { fetchAPI, getAppearance, getDate, HeadingGroup, IconBadge, Link, Article, Paragraph, DataSummary, DataSummaryItem, ScoreBadge, Block, Heading } from "@developer-overheid-nl/don-register-components";
import appConfig from "../../../app.config";
import { DonDetail } from "@developer-overheid-nl/don-register-layouts";
import { t } from "i18next";

const { id } = Astro.params;

interface apiDetailResponse {
    id: string;
    title: string;
    description: string;
    contact: {
        name: string;
        url: string;
        email:  string;
    };
    organisation: {
        id: string;
        label: string;
        uri: string;
    };
    version: string;
    lifecycle: {
        status: 'active' | 'deprecated' | 'sunset' | 'retired';
        version: string;
        deprecated?: string;
        sunset?: string;
        retired?: string;
    };
    adrScore: number;
    servers: {
        [key: string]: {
            url: string;
            description: string;
        };
    };
}

const {data, headers} = await fetchAPI<apiDetailResponse>(`https://api.don.apps.digilab.network/api-register/v1/apis/${id}`, '153ede87-7c4c-4f22-99b2-d718423dd18d');
console.log({data, headers});

const details = data.hasOwnProperty('message') ? null : data as apiDetailResponse;
---

<DonDetail appConfig={appConfig} titlePage={`Details van API: ${details?.title}`}>
      <HeadingGroup 
        slot="header"
        title={`Details van API: ${details?.title}`} 
        level={2} 
        appearanceLevel={3} 
      >
        <Paragraph itemScope={true} itemType="https://schema.org/Organization" itemID={details?.organisation.uri} className={`styles.aboveLink styles.publisher`}>
            <span itemprop="name"><Link className={`styles.orgLink`} href={new URL(`./?organisation=${details?.organisation.uri}`, Astro.url).toString()}>
                {details?.organisation.label}
            </Link></span>
        </Paragraph>
      </HeadingGroup>
      <Fragment slot="description">
        <Paragraph>
          {details?.description}
        </Paragraph>
      </Fragment>
      <Fragment slot="aside">
        <DataSummary appearance="row">
          <DataSummaryItem itemKey="Organisatie" itemValue={details?.organisation.label || '-'} />
          <DataSummaryItem itemKey="Contactpersoon" itemValue={details?.contact.name || '-'} />
          <DataSummaryItem itemKey="Email" itemValue={details?.contact.email || '-'} />
        </DataSummary>
      </Fragment>
      <Fragment slot="meta">
        <Block layout="flex-row">
          <div><span>Versie: </span>{details?.lifecycle.version || '-'}</div>
          <div><span>ADR Score: </span><ScoreBadge name={`ADR`} score={details?.adrScore} max={7} /></div>
          <div>
            <IconBadge 
              name={details?.lifecycle.status || 'unknown'} 
              appearance={getAppearance(details?.lifecycle || {status: 'active'})} 
            />
            {t(`components.status-${details?.lifecycle.status}`, {context: getAppearance(details?.lifecycle), date: getDate(details?.lifecycle)})}
          </div>
        </Block>
        <Heading level={3} appearanceLevel={4}>Servers</Heading>
        <Block appearance="outlined">
          <DataSummary appearance="row">
            {details?.servers.map((server) => (
              <DataSummaryItem itemKey={server.description} itemValue={server.url} />
            ))}
          </DataSummary>
        </Block>
      </Fragment>
    <!-- <>üêí met ID: {id}</>
    <pre style={{fontSize: 'x-small', whiteSpace: 'pre-wrap'}}>{JSON.stringify(data)}</pre> -->
</DonDetail>