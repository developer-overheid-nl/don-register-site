---
import appConfig from "../../../../app.config";
import { DonOverview, getRouting, parseHeaders, getPagination } from "@developer-overheid-nl/don-register-layouts";
import { Alert, CardAsLink, CardsList, CardsListItem, DataBadgeLink, Filters, getAppearance, getDate, Heading, HeadingGroup, IconBadge, Link, Markdown, Pagination, /*OverviewContainer,*/ Paragraph, ScoreBadge } from "@developer-overheid-nl/don-register-components";
// import { configStore } from "@developer-overheid-nl/don-register-components";

import { t } from "i18next";
import i18n from "@developer-overheid-nl/don-register-components/i18n";
import createClient from "openapi-fetch";
import { type paths } from "../../../types/api-schema"; 
import { API_URL, API_ENDPOINT, API_VERSION, API_X_API_KEY } from "astro:env/server";

import {Content as Intro} from '../../../partials/intro.md';

Astro.response.headers.set('Cache-Control', 'public, max-age=7200');
const { page = 1 } = Astro.params;

const APIS_RESOURCE: keyof paths = `/${API_VERSION}/apis`;
const ORGS_RESOURCE: keyof paths = `/${API_VERSION}/organisations`;

const routingObj = getRouting(Astro.url, Astro.originPathname, Astro.routePattern, Astro.params);

const client = createClient<paths>({ baseUrl: `${API_URL}/${API_ENDPOINT}` });
const { data, error, response: { headers } } = await client.GET(APIS_RESOURCE, {
  params: {
    query: { 
      page: Number(page),
      ...routingObj.query,
    },
  },
  headers: {
    'x-api-key': API_X_API_KEY,
  },
});

const { data: filters, error: filtersError, response: { headers: filtersHeaders } } = await client.GET(ORGS_RESOURCE, {
  headers: {
    'x-api-key': API_X_API_KEY,
  },
});

const paginationObj = parseHeaders(headers);
const pagination = getPagination(paginationObj, routingObj.url);

const outOfBounds = Boolean(paginationObj.totalPages && Number(page) > paginationObj.totalPages);

const { i18n: i18nApp } = appConfig;
i18n.addResourceBundle(i18n.language, 'translation', i18nApp ? i18nApp[i18n.language] : {}, true, true);

const i18nContext = routingObj.query && Object.keys(routingObj.query).length > 0 ? 'filtered' : 'all';

const items = error ? null : data;

---

<DonOverview appConfig={appConfig} titlePage={t('pages.overview')}>
  <div class="markdown-content utrecht-html" slot="header"><Intro /></div>
  <!-- <div slot="search">TODO: Search form</div> -->
  <Filters slot="filters" routing={routingObj} data={filters} headers={filtersHeaders} />

  <HeadingGroup className="heading-results" title={t('components.search-results', {context: i18nContext})} level={2}>
    <Paragraph role="status">{t('components.search-results-amount', {context: i18nContext, amount: paginationObj.totalCount})}</Paragraph>
  </HeadingGroup>

  { error && (
    <Alert type="error">{(error as unknown as any).message || t('components.fuzz-error')}</Alert>
  )}

  { outOfBounds && (
    <Alert type="warning">
      <Heading level={2} appearanceLevel={5}>{t('components.fuzz-error')}</Heading>
      {t('components.pagination-out-of-bounds', {page: page, count: paginationObj.totalPages})}
    </Alert>
  )}

  { items && items.length > 0 ? (
    <CardsList>
      {
        items.map((item, index, array) => (
          <CardsListItem index={index} setsize={array.length}>
            <CardAsLink
              href={new URL(`../${item.id}`, routingObj?.url).toString()}
              linkLabel={t('components.view-details')}
            >
              <HeadingGroup slot="heading" title={item.title || '🐒'} level={2} appearanceLevel={4}>
                <div class="subtitle" slot="subTitle">
                  <Paragraph slot="subTitle" itemScope={true} itemType="https://schema.org/Organization" itemID={item.organisation?.uri} className="moveAbove">
                    <span itemprop="name"><DataBadgeLink appearance="subtle" className="orgLink" href={new URL(`../?organisation=${item.organisation?.uri}`, routingObj.url).toString()}>
                      {item.organisation?.label}
                    </DataBadgeLink></span>
                  </Paragraph>
                  <div class="header-meta">
                    <IconBadge 
                      className={`moveAbove`} 
                      name={item.lifecycle?.status || 'unknown'} 
                      appearance={getAppearance(item.lifecycle)} 
                      title={t(`components.status-${item.lifecycle?.status}`, {context: getAppearance(item.lifecycle), date: getDate(item.lifecycle)})} 
                      /> 
                    <div class="version">{t('components.version', {version: item.lifecycle?.version})}</div>
                  </div>
              </div>
              </HeadingGroup>
              <div slot="description" class="description utrecht-html"><Markdown text={item.description} openLinksInNewTab allowedElements={['p', 'a', 'ul', 'ol', 'li']} /></div>
              <span slot="metadata" class="adr-score-label">{t(`components.adr-score`)}:</span>
              <ScoreBadge slot="metadata" className="meta" name={`ADR`} score={item.adrScore} max={100} inPercentage />
            </CardAsLink>
          </CardsListItem>
        ))
      }
    </CardsList>
  ) : 
  ( 
    <Alert type="warning">{t('components.no-items-found')}</Alert> 
  )}
  <Pagination slot="pagination" {...pagination} />
</DonOverview>

<style>
  .heading-results {
    padding-inline-start: calc(var(--rhc-card-as-link-border-width, 1px) + var(--rhc-card-as-link-padding-inline-start, 16px));
  }
  .subtitle {
    display: flex;
    justify-content: space-between;
  }

  .header-meta {
    gap: 0.5rem;
    display: flex;
    align-items: center;
    font-size: 1rem;
  }

  .description {
    a:hover {
      text-decoration-line: none;
    }
  }

  .meta {
    place-content: center;
  }

  .version {
    text-decoration: none;
  }

  .orgLink {
    font-size: 0.875rem;
  }
</style>