---
import { API_ENDPOINT, API_X_API_KEY, API_VERSION } from "astro:env/client";

import appConfig from "../../app.config";
import { DonOverview } from "@developer-overheid-nl/don-register-layouts";
// import { Search } from "@developer-overheid-nl/don-register-components";

console.log('env', API_ENDPOINT, API_X_API_KEY, API_VERSION, import.meta.env.SSR, import.meta.env.MODE, import.meta.env.SITE);
---

<DonOverview appConfig={appConfig} titlePage="Overzicht">
  <script type="module" slot="head" is:inline define:vars={{ API_ENDPOINT, API_X_API_KEY, API_VERSION }}>
    self.addEventListener('fetch', async (event) => {
      console.log('Fetch event for', event.request.url);
      
      event.respondWith(
        caches.open('api-cache').then(async (cache) => {
          const cachedResponse = await cache.match(event.request);
          if (cachedResponse) {
            console.log('Returning cached response for', event.request.url);
            return cachedResponse;
          }
          
          console.log('Fetching from network:', event.request.url);
          const response = await fetch(event.request);
          
          if (response.ok) {
            cache.put(event.request, response.clone());
            console.log('Cached new response for', event.request.url);
          } else {
            console.error('Network request failed:', response.status, response.statusText);
          }
          
          return response;
        })
      );
    })

    console.log('props', API_X_API_KEY, API_ENDPOINT, API_VERSION);
    const data = await fetch(`${API_ENDPOINT}/${API_VERSION}/apis`, {
      headers: {
        'x-api-key': API_X_API_KEY,
      },
    })
    .then((response) => {
      if (!response.ok) {
        return {
          error: `HTTP error! Status: ${response.status} ${response.statusText}`,
        };
      }

      return response.json();
    }).catch((error) => {
      return { error: error.message };
    });
    
    localStorage.setItem('apiData', JSON.stringify(data));
    localStorage.setItem('apiLastUpdated', new Date().toISOString());
    console.log('Fetched data:', data);
  </script>
    <!-- <Search /> -->
     <div>
      kijk in de console voor de data
       <!-- {data == undefined || data.error ? (
         <p>Error fetching data: {data?.error}</p>
       ) : (
         <pre>{JSON.stringify(data, null, 2)}</pre>
       )} -->
     </div>
</DonOverview>
